const app = require('../app');
const debug = require('debug')('college-time-table:server');
const https = require('https');
const http = require('http');
const fs = require('fs');
const hostname = 'www.timetable.college';
const httpsPort = 8443;
const httpPort = 8080;

const httpsOptions = {
  cert: fs.readFileSync('ssl/college_timetable.crt'),
  ca: fs.readFileSync('ssl/college_timetable.crt'),
  key: fs.readFileSync('ssl/college_timetable.key'),
};

const httpServer = http.createServer((req, res) => {
  res.statusCode = 301;
  res.setHeader('Location', `https://${hostname}${req.url}`);
  res.end(); // make sure to call send() or end() to send the response
});

const httpsServer = https.createServer(httpsOptions, app);
httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

httpServer.listen(httpPort);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port 8443';

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = httpsServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port 8443';
  debug('Listening on ' + bind);
}

